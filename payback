#!/usr/bin/perl -w
use strict;

# The payback script tracks a series of group expenses and payments, and
# figures out who owes how much to whom.  The general principle is that
# "the pot" pays for group events, and people owe money to (and pay money to)
# the pot.
#
# Example: Alice, Bob, Carol, and Dave have a group dinner costing $60 (and
# they decide to split the cost evenly).  Alice pays $40 and Bob pays $20,
# and later they try to figure out who owes what.  The line item looks like
# this:
#    Item: Dinner with the gang ("Dinner")
#    Owe: Alice, Bob, Carol, Dave      Paid: Alice(40.00), Bob(20.00)
#
# "The pot" paid $60.  Everyone owes equally, so everyone owes $15.  Carol and
# Dave didn't pay anything, so they each owe the pot $15.  Bob paid $20 but
# only owed the pot $15, so the pot owes him $5.  Alice paid $40 but only owed
# the pot $15, so the pot owes her $25.  Carol and Dave pay the pot their $30,
# which is then distributed to Alice and Bob.
#
# INPUT FILE SYNTAX
#  * An optional line-item detailed name, with an optional short name.  (Note
#       that the second example doesn't have a separate short name.)
#    Item: Long detailed line-item name ("Short Name")
#    Item: Quick Item
#
#  * The list of people who owe money for the line item, with optional
#      hard-coded amounts that they owe, e.g. if they don't owe an equal
#      share.  (All people who don't owe a hard-coded amount will split the
#      remaining balance equally.)
#    Owe: Alice, Bob(100.00), Carol(50.00), Dave
#       (in the above example, Bob owes $100, Carol owes $50, and Alice and
#        Dave split the remainder equally)
#
# * The list of people who paid for the line item, and how much
#    Paid: Alice(100.00), Bob(200.00)
#   (must be on the same line as the "Owe:" segment)
#
# * blank lines are ignored
# * lines starting with # are ignored
# * lines starting with "Comment:" are printed out but otherwise ignored


my $DEBUG = 1;
my $item = "[no item given]";
my ($linetotal, @items1, @items2, %owe_to_pot, %paid_to_pot,
    $equal_share_payors, %participants);

sub DEBUG (@) { print STDOUT "@_\n" if $DEBUG; }

while (<>) {
  s/#.*//; next if /^\s*$/;
  if (/^\s*Comment:\s*(.*)/) { print ">>> $1\n"; next; }
  if (/Item:\s*(.*?)\s*\("(.*)"\)\s*$/) {
     # Item: Some Long Name For An Item ("SLNFI Item")
     $item = $2; print ">>> Item: $1\n"; next; }
  if (/Item:\s*(.*?)\s*$/) { $item = $1; print ">>> Item: $1\n"; next; }
 
  # A line looks like:
  # "Owe: Alice Bob(20.00) Chris Donna       Paid: Alice(50.00) Bob(20.00)"
  /Owe:(.*)Paid:(.*)/ or
    die "ERROR: Line $. not of the form 'Owe: ...  Paid: ...'\n";
  @items1 = split ' ', $1; @items2 = split ' ', $2;

  $linetotal=0; $equal_share_payors=0;
  foreach $_ (@items2) {
    # "Paid: Alice(50.00) Bob(20.00)"
    s/,$//;
    /^(\S+)\((.*?)\)$/ or
      die "ERROR: Line $. payor '$_' should be 'Payor(amount)'\n";
    # DEBUG "Line $.: $1 paid $2";
    DEBUG "$item: $1 paid $2";
    $paid_to_pot{$1} += $2;
    $linetotal += $2;
    $participants{$1} = 1;
  }
#  DEBUG "Line $.: Total paid is $linetotal";

  # First, if amounts owed are specified inline, debit and subtract from
  # the total.
  foreach $_ (@items1) {
    # "Owe: Alice, Bob(20.00), Chris, Donna"
    s/,$//;
    /^(\w+?)(\((.*?)\))?$/ or
      die "ERROR: Line $. Attendee '$_' should be 'Attendee[(amount)]'\n";
    if (defined $2) {
      $owe_to_pot{$1} += $3;
      # DEBUG "Line $.: $1 owes $3 (specified on line)";
      DEBUG "$item: $1 owes $3 (specified on line)";
      $linetotal -= $3;
      $participants{$1} = 1;
    } else {
      ++$equal_share_payors;
    }
  }

  # Now, everyone left owes an equal share
#  DEBUG "Line $.: Cost to be divided equally: $linetotal";
  if ($equal_share_payors == 0) {
     next if abs($linetotal) < 1e-5;
     print "ERROR: $linetotal left to pay on line, but all payor amounts have been specified\n";
     die;
  }
  my $owed = $linetotal / $equal_share_payors;
  foreach $_ (@items1) {
    # "Owe: Alice, Bob(20.00), Chris, Donna"
    s/,$//;
    /^(\w+)(\((.*?)\))?$/ or
      die "ERROR: Line $. Attendee '$_' should be 'Attendee[(amount)]'\n";
    if (not defined $2) {
      $owe_to_pot{$1} += $owed;
      # DEBUG "Line $.: $1 owes ", sprintf("%.3f",$owed), " (equal share)";
      DEBUG "$item: $1 owes ", sprintf("%.3f",$owed), " (equal share)";
      $participants{$1} = 1;
    }
  }
}

foreach $_ (sort keys %participants) {
  my ($paid, $owe) = ($paid_to_pot{$_}, $owe_to_pot{$_});
  $paid = 0 if not defined $paid;
  $owe = 0 if not defined $owe;
  printf "%10s: total paid = %6.2f, total owed = %6.2f, balance = %6.2f\n",
    $_, $paid, $owe, $paid-$owe;
}
